{"version":3,"file":"index.mjs","sources":["../lib/assign.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\n\n\n// FUNCTIONS //\n\n/**\n* Applies a callback function to elements in an input array and assigns results to elements in an output array.\n*\n* @private\n* @param {Collection} x - input array\n* @param {Collection} y - output array\n* @param {integer} stride - stride length for output array\n* @param {NonNegativeInteger} offset - starting index for output array\n* @param {Function} fcn - callback function\n* @param {*} thisArg - callback execution context\n* @returns {Collection} output array\n*\n* @example\n* import ones from '@stdlib/array-base-ones';\n* import zeros from '@stdlib/array-base-zeros';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = ones( 4 );\n* var y = zeros( x.length );\n* var out = internal( x, y, 1, 0, scale );\n* // returns [ 10.0, 10.0, 10.0, 10.0 ]\n*\n* var bool = ( out === y );\n* // returns true\n*/\nfunction internal( x, y, stride, offset, fcn, thisArg ) {\n\tvar io;\n\tvar i;\n\n\tio = offset;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\ty[ io ] = fcn.call( thisArg, x[ i ], i, x );\n\t\tio += stride;\n\t}\n\treturn y;\n}\n\n/**\n* Applies a callback function to elements in an input array and assigns results to elements in an output array.\n*\n* @private\n* @param {Object} x - input array object\n* @param {Object} y - output array object\n* @param {integer} stride - stride length for output array\n* @param {NonNegativeInteger} offset - starting index for output array\n* @param {Function} fcn - callback function\n* @param {*} thisArg - callback execution context\n* @returns {Object} output array object\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n* import ones from '@stdlib/array-base-ones';\n* import zeros from '@stdlib/array-base-zeros';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = ones( 4 );\n* var y = zeros( x.length );\n*\n* var out = accessors( arraylike2object( toAccessorArray( x ) ), arraylike2object( toAccessorArray( y ) ), 1, 0, scale );\n* // y => [ 10.0, 10.0, 10.0, 10.0 ]\n*/\nfunction accessors( x, y, stride, offset, fcn, thisArg ) {\n\tvar xdata;\n\tvar ydata;\n\tvar xget;\n\tvar yset;\n\tvar io;\n\tvar i;\n\n\txdata = x.data;\n\tydata = y.data;\n\txget = x.accessors[ 0 ];\n\tyset = y.accessors[ 1 ];\n\n\tio = offset;\n\tfor ( i = 0; i < xdata.length; i++ ) {\n\t\tyset( ydata, io, fcn.call( thisArg, xget( xdata, i ), i, xdata ) );\n\t\tio += stride;\n\t}\n\treturn y;\n}\n\n\n// MAIN //\n\n/**\n* Applies a callback function to elements in an input array and assigns results to elements in an output array.\n*\n* @param {Collection} x - input array\n* @param {Collection} y - output array\n* @param {integer} stride - stride length for output array\n* @param {NonNegativeInteger} offset - starting index for output array\n* @param {Function} fcn - callback function\n* @param {*} [thisArg] - callback execution context\n* @returns {Collection} output array\n*\n* @example\n* import ones from '@stdlib/array-base-ones';\n* import zeros from '@stdlib/array-base-zeros';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = ones( 4 );\n* var y = zeros( x.length );\n*\n* var out = assign( x, y, 1, 0, scale );\n* // returns [ 10.0, 10.0, 10.0, 10.0 ]\n*\n* var bool = ( out === y );\n* // returns true\n*/\nfunction assign( x, y, stride, offset, fcn, thisArg ) {\n\tvar xobj;\n\tvar yobj;\n\n\txobj = arraylike2object( x );\n\tyobj = arraylike2object( y );\n\tif ( xobj.accessorProtocol || yobj.accessorProtocol ) {\n\t\taccessors( xobj, yobj, stride, offset, fcn, thisArg );\n\t\treturn y;\n\t}\n\treturn internal( x, y, stride, offset, fcn, thisArg );\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport zeros from '@stdlib/array-base-zeros';\nimport assign from './assign.js';\n\n\n// FUNCTIONS //\n\n/**\n* Tests whether an object has a specified method.\n*\n* @private\n* @param {Object} obj - input object\n* @param {string} method - method name\n* @returns {boolean} boolean indicating whether an object has a specified method\n*\n* @example\n* var bool = hasMethod( [], 'map' );\n* // returns true\n*\n* @example\n* var bool = hasMethod( [], 'beep' );\n* // returns false\n*/\nfunction hasMethod( obj, method ) {\n\treturn ( typeof obj[ method ] === 'function' );\n}\n\n\n// MAIN //\n\n/**\n* Applies a callback function to elements in an input array and assigns results to elements in a new output array.\n*\n* @param {Collection} x - input array\n* @param {Function} fcn - callback function\n* @param {*} [thisArg] - callback execution context\n* @returns {Collection} output array\n*\n* @example\n* import ones from '@stdlib/array-base-ones';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = ones( 4 );\n* var y = map( x, scale );\n* // returns [ 10.0, 10.0, 10.0, 10.0 ]\n*/\nfunction map( x, fcn, thisArg ) {\n\tif ( hasMethod( x, 'map' ) ) {\n\t\treturn x.map( fcn, thisArg );\n\t}\n\treturn assign( x, zeros( x.length ), 1, 0, fcn, thisArg );\n}\n\n\n// EXPORTS //\n\nexport default map;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a callback function to elements in an input array and assign results to elements in a new output array.\n*\n* @module @stdlib/array-base-map\n*\n* @example\n* import ones from '@stdlib/array-base-ones';\n* import map from '@stdlib/array-base-map';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = ones( 4 );\n* var y = map( x, scale );\n* // returns [ 10.0, 10.0, 10.0, 10.0 ]\n*\n* @example\n* import ones from '@stdlib/array-base-ones';\n* import zeros from '@stdlib/array-base-zeros';\n* import map from '@stdlib/array-base-map';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = ones( 4 );\n* var y = zeros( x.length );\n*\n* var out = map.assign( x, y, 1, 0, scale );\n* // returns [ 10.0, 10.0, 10.0, 10.0 ]\n*\n* var bool = ( out === y );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"assign\": \"main.assign\" }\n"],"names":["assign","x","y","stride","offset","fcn","thisArg","xobj","yobj","arraylike2object","accessorProtocol","xdata","ydata","xget","yset","io","i","data","accessors","length","call","internal","map","zeros","setReadOnly","main"],"mappings":";;yTAmJA,SAASA,EAAQC,EAAGC,EAAGC,EAAQC,EAAQC,EAAKC,GAC3C,IAAIC,EACAC,EAIJ,OAFAD,EAAOE,EAAkBR,GACzBO,EAAOC,EAAkBP,GACpBK,EAAKG,kBAAoBF,EAAKE,kBA1DpC,SAAoBT,EAAGC,EAAGC,EAAQC,EAAQC,EAAKC,GAC9C,IAAIK,EACAC,EACAC,EACAC,EACAC,EACAC,EAQJ,IANAL,EAAQV,EAAEgB,KACVL,EAAQV,EAAEe,KACVJ,EAAOZ,EAAEiB,UAAW,GACpBJ,EAAOZ,EAAEgB,UAAW,GAEpBH,EAAKX,EACCY,EAAI,EAAGA,EAAIL,EAAMQ,OAAQH,IAC9BF,EAAMF,EAAOG,EAAIV,EAAIe,KAAMd,EAASO,EAAMF,EAAOK,GAAKA,EAAGL,IACzDI,GAAMZ,CAGR,CAwCEe,CAAWX,EAAMC,EAAML,EAAQC,EAAQC,EAAKC,GACrCJ,GApGT,SAAmBD,EAAGC,EAAGC,EAAQC,EAAQC,EAAKC,GAC7C,IAAIS,EACAC,EAGJ,IADAD,EAAKX,EACCY,EAAI,EAAGA,EAAIf,EAAEkB,OAAQH,IAC1Bd,EAAGa,GAAOV,EAAIe,KAAMd,EAASL,EAAGe,GAAKA,EAAGf,GACxCc,GAAMZ,EAEP,OAAOD,CACR,CA4FQmB,CAAUpB,EAAGC,EAAGC,EAAQC,EAAQC,EAAKC,EAC7C,CCxFA,SAASgB,EAAKrB,EAAGI,EAAKC,GACrB,MA1BkC,mBA0BlBL,EAAG,OACXA,EAAEqB,IAAKjB,EAAKC,GAEbN,EAAQC,EAAGsB,EAAOtB,EAAEkB,QAAU,EAAG,EAAGd,EAAKC,EACjD,CCVAkB,EAAAC,EAAA,SAAAzB"}