{
  "version": 3,
  "sources": ["../lib/assign.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n\n\n// FUNCTIONS //\n\n/**\n* Applies a callback function to elements in an input array and assigns results to elements in an output array.\n*\n* @private\n* @param {Collection} x - input array\n* @param {Collection} y - output array\n* @param {integer} stride - stride length for output array\n* @param {NonNegativeInteger} offset - starting index for output array\n* @param {Function} fcn - callback function\n* @param {*} thisArg - callback execution context\n* @returns {Collection} output array\n*\n* @example\n* var ones = require( '@stdlib/array-base-ones' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = ones( 4 );\n* var y = zeros( x.length );\n* var out = internal( x, y, 1, 0, scale );\n* // returns [ 10.0, 10.0, 10.0, 10.0 ]\n*\n* var bool = ( out === y );\n* // returns true\n*/\nfunction internal( x, y, stride, offset, fcn, thisArg ) {\n\tvar io;\n\tvar i;\n\n\tio = offset;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\ty[ io ] = fcn.call( thisArg, x[ i ], i, x );\n\t\tio += stride;\n\t}\n\treturn y;\n}\n\n/**\n* Applies a callback function to elements in an input array and assigns results to elements in an output array.\n*\n* @private\n* @param {Object} x - input array object\n* @param {Object} y - output array object\n* @param {integer} stride - stride length for output array\n* @param {NonNegativeInteger} offset - starting index for output array\n* @param {Function} fcn - callback function\n* @param {*} thisArg - callback execution context\n* @returns {Object} output array object\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n* var ones = require( '@stdlib/array-base-ones' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = ones( 4 );\n* var y = zeros( x.length );\n*\n* var out = accessors( arraylike2object( toAccessorArray( x ) ), arraylike2object( toAccessorArray( y ) ), 1, 0, scale );\n* // y => [ 10.0, 10.0, 10.0, 10.0 ]\n*/\nfunction accessors( x, y, stride, offset, fcn, thisArg ) {\n\tvar xdata;\n\tvar ydata;\n\tvar xget;\n\tvar yset;\n\tvar io;\n\tvar i;\n\n\txdata = x.data;\n\tydata = y.data;\n\txget = x.accessors[ 0 ];\n\tyset = y.accessors[ 1 ];\n\n\tio = offset;\n\tfor ( i = 0; i < xdata.length; i++ ) {\n\t\tyset( ydata, io, fcn.call( thisArg, xget( xdata, i ), i, xdata ) );\n\t\tio += stride;\n\t}\n\treturn y;\n}\n\n\n// MAIN //\n\n/**\n* Applies a callback function to elements in an input array and assigns results to elements in an output array.\n*\n* @param {Collection} x - input array\n* @param {Collection} y - output array\n* @param {integer} stride - stride length for output array\n* @param {NonNegativeInteger} offset - starting index for output array\n* @param {Function} fcn - callback function\n* @param {*} [thisArg] - callback execution context\n* @returns {Collection} output array\n*\n* @example\n* var ones = require( '@stdlib/array-base-ones' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = ones( 4 );\n* var y = zeros( x.length );\n*\n* var out = assign( x, y, 1, 0, scale );\n* // returns [ 10.0, 10.0, 10.0, 10.0 ]\n*\n* var bool = ( out === y );\n* // returns true\n*/\nfunction assign( x, y, stride, offset, fcn, thisArg ) {\n\tvar xobj;\n\tvar yobj;\n\n\txobj = arraylike2object( x );\n\tyobj = arraylike2object( y );\n\tif ( xobj.accessorProtocol || yobj.accessorProtocol ) {\n\t\taccessors( xobj, yobj, stride, offset, fcn, thisArg );\n\t\treturn y;\n\t}\n\treturn internal( x, y, stride, offset, fcn, thisArg );\n}\n\n\n// EXPORTS //\n\nmodule.exports = assign;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar assign = require( './assign.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Tests whether an object has a specified method.\n*\n* @private\n* @param {Object} obj - input object\n* @param {string} method - method name\n* @returns {boolean} boolean indicating whether an object has a specified method\n*\n* @example\n* var bool = hasMethod( [], 'map' );\n* // returns true\n*\n* @example\n* var bool = hasMethod( [], 'beep' );\n* // returns false\n*/\nfunction hasMethod( obj, method ) {\n\treturn ( typeof obj[ method ] === 'function' );\n}\n\n\n// MAIN //\n\n/**\n* Applies a callback function to elements in an input array and assigns results to elements in a new output array.\n*\n* @param {Collection} x - input array\n* @param {Function} fcn - callback function\n* @param {*} [thisArg] - callback execution context\n* @returns {Collection} output array\n*\n* @example\n* var ones = require( '@stdlib/array-base-ones' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = ones( 4 );\n* var y = map( x, scale );\n* // returns [ 10.0, 10.0, 10.0, 10.0 ]\n*/\nfunction map( x, fcn, thisArg ) {\n\tif ( hasMethod( x, 'map' ) ) {\n\t\treturn x.map( fcn, thisArg );\n\t}\n\treturn assign( x, zeros( x.length ), 1, 0, fcn, thisArg );\n}\n\n\n// EXPORTS //\n\nmodule.exports = map;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a callback function to elements in an input array and assign results to elements in a new output array.\n*\n* @module @stdlib/array-base-map\n*\n* @example\n* var ones = require( '@stdlib/array-base-ones' );\n* var map = require( '@stdlib/array-base-map' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = ones( 4 );\n* var y = map( x, scale );\n* // returns [ 10.0, 10.0, 10.0, 10.0 ]\n*\n* @example\n* var ones = require( '@stdlib/array-base-ones' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var map = require( '@stdlib/array-base-map' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = ones( 4 );\n* var y = zeros( x.length );\n*\n* var out = map.assign( x, y, scale );\n* // returns [ 10.0, 10.0, 10.0, 10.0 ]\n*\n* var bool = ( out === y );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"assign\": \"main.assign\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,qCAAsC,EAiCtE,SAASC,EAAUC,EAAGC,EAAGC,EAAQC,EAAQC,EAAKC,EAAU,CACvD,IAAIC,EACAC,EAGJ,IADAD,EAAKH,EACCI,EAAI,EAAGA,EAAIP,EAAE,OAAQO,IAC1BN,EAAGK,CAAG,EAAIF,EAAI,KAAMC,EAASL,EAAGO,CAAE,EAAGA,EAAGP,CAAE,EAC1CM,GAAMJ,EAEP,OAAOD,CACR,CA8BA,SAASO,EAAWR,EAAGC,EAAGC,EAAQC,EAAQC,EAAKC,EAAU,CACxD,IAAII,EACAC,EACAC,EACAC,EACAN,EACAC,EAQJ,IANAE,EAAQT,EAAE,KACVU,EAAQT,EAAE,KACVU,EAAOX,EAAE,UAAW,CAAE,EACtBY,EAAOX,EAAE,UAAW,CAAE,EAEtBK,EAAKH,EACCI,EAAI,EAAGA,EAAIE,EAAM,OAAQF,IAC9BK,EAAMF,EAAOJ,EAAIF,EAAI,KAAMC,EAASM,EAAMF,EAAOF,CAAE,EAAGA,EAAGE,CAAM,CAAE,EACjEH,GAAMJ,EAEP,OAAOD,CACR,CAiCA,SAASY,EAAQb,EAAGC,EAAGC,EAAQC,EAAQC,EAAKC,EAAU,CACrD,IAAIS,EACAC,EAIJ,OAFAD,EAAOhB,EAAkBE,CAAE,EAC3Be,EAAOjB,EAAkBG,CAAE,EACtBa,EAAK,kBAAoBC,EAAK,kBAClCP,EAAWM,EAAMC,EAAMb,EAAQC,EAAQC,EAAKC,CAAQ,EAC7CJ,GAEDF,EAAUC,EAAGC,EAAGC,EAAQC,EAAQC,EAAKC,CAAQ,CACrD,CAKAR,EAAO,QAAUgB,ICnKjB,IAAAG,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,0BAA2B,EAC5CC,EAAS,IAqBb,SAASC,EAAWC,EAAKC,EAAS,CACjC,OAAS,OAAOD,EAAKC,CAAO,GAAM,UACnC,CAwBA,SAASC,EAAKC,EAAGC,EAAKC,EAAU,CAC/B,OAAKN,EAAWI,EAAG,KAAM,EACjBA,EAAE,IAAKC,EAAKC,CAAQ,EAErBP,EAAQK,EAAGN,EAAOM,EAAE,MAAO,EAAG,EAAG,EAAGC,EAAKC,CAAQ,CACzD,CAKAT,EAAO,QAAUM,ICtBjB,IAAII,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAS,IAKbF,EAAaC,EAAM,SAAUC,CAAO,EAKpC,OAAO,QAAUD",
  "names": ["require_assign", "__commonJSMin", "exports", "module", "arraylike2object", "internal", "x", "y", "stride", "offset", "fcn", "thisArg", "io", "i", "accessors", "xdata", "ydata", "xget", "yset", "assign", "xobj", "yobj", "require_main", "__commonJSMin", "exports", "module", "zeros", "assign", "hasMethod", "obj", "method", "map", "x", "fcn", "thisArg", "setReadOnly", "main", "assign"]
}
